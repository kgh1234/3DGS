# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10bZHwRB-opIn7eoMxcAh5wzfvHDPIc5m
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content
!rm -rf gaussian-splatting  # 기존 프로젝트 디렉터리 삭제
!git clone --recursive https://github.com/camenduru/gaussian-splatting

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gaussian-splatting/submodules/diff-gaussian-rasterization
!python setup.py build
!python setup.py install

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gaussian-splatting

!pip install -q plyfile  # 설치에 필요한 기본 패키지
!pip install -q ./submodules/diff-gaussian-rasterization  # Gaussian Splatting 서브모듈 설치
!pip install -q ./submodules/simple-knn  # KNN 서브모듈 설치

!wget https://huggingface.co/camenduru/gaussian-splatting/resolve/main/tandt_db.zip
!unzip tandt_db.zip

!python train.py -s /content/gaussian-splatting/tandt/train

!wget https://huggingface.co/camenduru/gaussian-splatting/resolve/main/GaussianViewTest.zip

!unzip GaussianViewTest.zip

cfg_file_path = "/content/gaussian-splatting/GaussianViewTest/model/cfg_args"

# 파일 열기 및 수정
with open(cfg_file_path, "r") as file:
    content = file.read()

# 백슬래시를 슬래시로 교체
fixed_content = content.replace("\\", "/")

# 수정된 내용 저장
with open(cfg_file_path, "w") as file:
    file.write(fixed_content)

print("cfg_args 파일의 경로가 수정되었습니다.")

cfg_file_path = "/content/gaussian-splatting/GaussianViewTest/model/cfg_args"

# cfg_args 파일 내용 출력
with open(cfg_file_path, "r") as file:
    print(file.read())

cfg_file_path = "/content/gaussian-splatting/GaussianViewTest/model/cfg_args"

# cfg_args 파일 내용 읽기
with open(cfg_file_path, "r") as file:
    content = file.read()

# Windows 경로를 Linux 경로로 수정
fixed_content = content.replace("C:/Users/PC/Desktop/cloud/train", "/content/gaussian-splatting/tandt/train")
fixed_content = fixed_content.replace("C:/Users/PC/Desktop/cloud/model", "/content/gaussian-splatting/GaussianViewTest/model")

# 수정된 내용 저장
with open(cfg_file_path, "w") as file:
    file.write(fixed_content)

print("경로가 수정되었습니다.")

!python render.py -m /content/gaussian-splatting/GaussianViewTest/model

!ffmpeg -framerate 3 -i /content/gaussian-splatting/GaussianViewTest/model/train/ours_30000/renders/%05d.png -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2" -c:v libx264 -r 3 -pix_fmt yuv420p /content/renders.mp4

!ffmpeg -framerate 3 -i /content/gaussian-splatting/GaussianViewTest/model/train/ours_30000/gt/%05d.png -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2" -c:v libx264 -r 3 -pix_fmt yuv420p /content/gt.mp4 -y

from google.colab import files
files.download('/content/renders.mp4')

from google.colab import files
files.download('/content/gt.mp4')

print(f"Ground Truth Image Shape: {gt_img.shape}")
print(f"Rendered Image Shape: {rendered_img.shape}")

import os
from skimage.metrics import structural_similarity as ssim
from skimage.metrics import peak_signal_noise_ratio as psnr
import cv2

# Ground Truth 및 Rendered Image 디렉터리 경로
ground_truth_dir = "/content/gaussian-splatting/GaussianViewTest/model/train/ours_30000/gt/"
rendered_dir = "/content/gaussian-splatting/GaussianViewTest/model/train/ours_30000/renders/"

# PSNR 및 SSIM 계산
psnr_values = []
ssim_values = []

# 파일 이름 정렬
ground_truth_images = sorted(os.listdir(ground_truth_dir))
rendered_images = sorted(os.listdir(rendered_dir))

for gt_img_name, rendered_img_name in zip(ground_truth_images, rendered_images):
    # 이미지 경로
    gt_img_path = os.path.join(ground_truth_dir, gt_img_name)
    rendered_img_path = os.path.join(rendered_dir, rendered_img_name)

    # 이미지 읽기
    gt_img = cv2.imread(gt_img_path, cv2.IMREAD_COLOR)
    rendered_img = cv2.imread(rendered_img_path, cv2.IMREAD_COLOR)

    # BGR -> RGB 변환
    gt_img = cv2.cvtColor(gt_img, cv2.COLOR_BGR2RGB)
    rendered_img = cv2.cvtColor(rendered_img, cv2.COLOR_BGR2RGB)

    # PSNR 계산
    psnr_value = psnr(gt_img, rendered_img)
    psnr_values.append(psnr_value)

    # SSIM 계산 (win_size와 channel_axis 설정)
    ssim_value = ssim(
        gt_img, rendered_img, win_size=5, channel_axis=-1
    )
    ssim_values.append(ssim_value)

# 평균 PSNR 및 SSIM 계산
avg_psnr = sum(psnr_values) / len(psnr_values)
avg_ssim = sum(ssim_values) / len(ssim_values)

print(f"평균 PSNR: {avg_psnr:.2f} dB")
print(f"평균 SSIM: {avg_ssim:.4f}")

